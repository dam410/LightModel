function [L1,L2] = search_vanishing_line_no_jacobian(Q)

        b        = Q(1,1) + Q(2,2) + Q(3,3);
        c        = Q(1,1)*Q(2,2) + Q(1,1)*Q(3,3) + Q(2,2)*Q(3,3)-Q(1,2)^2 -Q(1,3)^2-Q(2,3)^2;
        d        = Q(1,1)*Q(2,3)^2 + Q(2,2)*Q(1,3)^2 + Q(3,3)*Q(1,2)^2 -Q(1,1)*Q(2,2)*Q(3,3)-2*Q(1,2)*Q(1,3)*Q(2,3);

        p        = b^2-3*c; % should not be zero or negative
        q        = 2*b^3-9*b*c-27*d;
        D        = acos(q/2/sqrt(p^3));
        if abs(D-pi) < 1e-7
                D = pi;
        end

        lambda   = 1/3*( b + 2*sqrt(p)*cos((D-2*pi)/3) );
        I3x3     = eye(3);
        X        = [0,Q(2:end)-lambda*I3x3(2:end)];
        X(1)     = (X(9)*X(4)^2 - 2*X(8)*X(4)*X(7) + X(5)*X(7)^2);
        s        = (- X(8)^2 + X(5)*X(9));
        X(2:end) = s*X(2:end);
        X        = reshape(X,3,3);

        v        = [(- X(2,3)^2 + X(2,2)*X(3,3)); (X(1,3)*X(2,3) - X(1,2)*X(3,3));(X(1,2)*X(2,3) - X(1,3)*X(2,2))];
        v        = v / sqrt(sum(v.*v));
        r1       = [-(X(1,3)*X(2,3) - X(1,2)*X(3,3));(- X(2,3)^2 + X(2,2)*X(3,3));0];
        r1       = r1 / sqrt(sum(r1.*r1));
        r2       = [-(X(1,2)*X(2,3) - X(1,3)*X(2,2))*(- X(2,3)^2 + X(2,2)*X(3,3)); ...
                        -(X(1,2)*X(2,3) - X(1,3)*X(2,2))*(X(1,3)*X(2,3) - X(1,2)*X(3,3)); ...
                        (X(1,3)*X(2,3) - X(1,2)*X(3,3))^2 + (- X(2,3)^2 + X(2,2)*X(3,3))^2];
        r2       = r2 / sqrt(sum(r2.*r2));
        R        = [ r1,r2,v];

        C        = transpose(R)*X*R;
        v        = v / sqrt(sum(v.*v));

        mu1      = C(1,1)/2 + C(2,2)/2 - (C(1,1)^2 - 2*C(1,1)*C(2,2) + 4*C(1,2)^2 + C(2,2)^2)^(1/2)/2;
        mu2      = C(1,1)/2 + C(2,2)/2 + (C(1,1)^2 - 2*C(1,1)*C(2,2) + 4*C(1,2)^2 + C(2,2)^2)^(1/2)/2;
        w1       = [ (C(1,1)/2 + C(2,2)/2 - (C(1,1)^2 - 2*C(1,1)*C(2,2) + 4*C(1,2)^2 + C(2,2)^2)^(1/2)/2) - C(2,2); C(1,2)  ];
        w2       = [ (C(1,1)/2 + C(2,2)/2 + (C(1,1)^2 - 2*C(1,1)*C(2,2) + 4*C(1,2)^2 + C(2,2)^2)^(1/2)/2) - C(2,2); C(1,2)  ];
        w1       = w1 / sqrt(sum(w1.*w1));
        w2       = w2 / sqrt(sum(w2.*w2));

        L1 =R*[w1*sqrt(-mu1)+w2*sqrt(mu2);0];
        L2 =R*[w1*sqrt(-mu1)-w2*sqrt(mu2);0];
end

